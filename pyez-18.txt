##############################################################################
#
# Name:   pyez-18
# Author: Yagnesh Patel
# Date:   8/1/19
# Version: 1.0
#
# Description: This script file system usage from the multiple routers at the same time. 
# 
#              
#
#    Copyright 2019 Juniper Networks, Inc. All rights reserved.
#    Licensed under the Juniper Networks Script Software License (the "License").
#    You may not use this script file except in compliance with the License,
#    which is located at
#    http://www.juniper.net/support/legal/scriptlicense/
#    Unless required by applicable law or otherwise agreed to in writing by the
#    parties, software distributed under the License is distributed on an "AS IS"
#    BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#    implied.
##############################################################################

from jnpr.junos import Device # (1)
from jnpr.junos.utils.fs import FS
from jnpr.junos.exception import *
import multiprocessing
import time
NUM_PROCESSES = 12 # (2)
USER = 'xxxxx'
PASSWD = 'xxxxx'
DEVICES = [
 '10.85.174.225',
 '10.85.174.206',
 '10.85.174.207',
 '10.85.174.208',
 '10.85.174.209',
 '10.85.174.210',
 '10.85.174.211',
 '10.85.174.212',
 '10.85.174.213',
 '10.85.174.214',
]
DIRECTORY = '/var/tmp/'
def check_directory_usage(host): # (3)
 try:
  with Device(host=host, user=USER, password=PASSWD) as dev:
   fs = FS(dev) # (4)
   print("Checking %s: " % host, end="")
   print(fs.directory_usage(DIRECTORY)) # (5)
 except ConnectRefusedError: # (6)
   print("%s: Error - Device connection refused!" % host)
 except ConnectTimeoutError:
   print("%s: Error - Device connection timed out!" % host)
 except ConnectAuthError:
   print("%s: Error - Authentication failure!" % host)

def main(): # (7)
 time_start = time.time()
 with multiprocessing.Pool(processes=NUM_PROCESSES) as process_pool: # (8)
  process_pool.map(check_directory_usage, DEVICES) # (9)
  process_pool.close() # (10)
  process_pool.join()
 print("Finished in %f sec." % (time.time() - time_start)) # (11)
if __name__ == "__main__": # (12)
 main()